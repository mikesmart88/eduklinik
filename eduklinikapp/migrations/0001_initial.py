# Generated by Django 5.1.3 on 2025-05-04 22:50

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('requiremwnt', models.CharField(blank=True, max_length=1000, verbose_name='requirments to partipate on this course')),
                ('c_type', models.CharField(blank=True, choices=[('Core Academic Tracks', 'Core Academic Tracks'), ('Examination preperation', 'Examination preperation'), ('Skill development services', 'Skill development services'), ('Specialized services', 'Specialized services')], max_length=1000, verbose_name='requirments to partipate on this course')),
                ('lesson_count', models.BigIntegerField(default=0, verbose_name='number of leassons')),
                ('meta_data', models.CharField(max_length=200, null=True, verbose_name='course meta decription')),
                ('participant', models.BigIntegerField(default=0, verbose_name='number of students')),
                ('weeks', models.CharField(default='1 week', max_length=200, verbose_name='specify how long it should take to complete the course')),
                ('c_img', models.ImageField(blank=True, max_length=200, null=True, upload_to='', verbose_name='add a image to decribe the corse')),
                ('pub_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date time of upload')),
                ('bio', models.TextField(null=True, verbose_name='decription and article abour this course')),
                ('tag', models.CharField(default='*basic,', max_length=200, verbose_name='write tag and colms of what the skill give to the user eg *bacis knowleged, *health care')),
                ('c_str', models.CharField(blank=True, max_length=200, null=True, unique=True, verbose_name='course spec id')),
            ],
            options={
                'ordering': ['-pub_date'],
            },
        ),
        migrations.CreateModel(
            name='subject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sub_name', models.CharField(max_length=200, null=True, verbose_name='cource_name eg mathematics english')),
            ],
        ),
        migrations.CreateModel(
            name='userimage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pics', models.ImageField(upload_to='profile pics', verbose_name='user image')),
                ('is_edit', models.BooleanField(default=False, verbose_name='is edited')),
            ],
        ),
        migrations.CreateModel(
            name='lesson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ltitle', models.CharField(max_length=200, verbose_name='lesson name')),
                ('lesson_str', models.CharField(blank=True, max_length=200, null=True, unique=True, verbose_name='leason spec id')),
                ('lesson_img', models.ImageField(blank=True, null=True, upload_to='', verbose_name='add a image to decribe the lesson')),
                ('lesson_level', models.CharField(blank=True, choices=[('Basic', 'Basic'), ('Advance', 'Advance'), ('Master', 'Master')], default='Basic', max_length=200, verbose_name='leasson level')),
                ('class_level', models.CharField(blank=True, choices=[('Basic6', 'Basic6'), ('Jss1', 'Jss1'), ('Jss2', 'Jss2'), ('Jss3', 'Jss3'), ('Ss1', 'Ss1'), ('Ss2', 'Ss2'), ('Ss3', 'Ss3')], default='Basic6', max_length=200, verbose_name='leasson class')),
                ('pub_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date time of upload')),
                ('under_course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='eduklinikapp.course')),
            ],
            options={
                'ordering': ['-pub_date'],
            },
        ),
        migrations.CreateModel(
            name='link',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link_name', models.CharField(max_length=200, verbose_name='link name')),
                ('url_link', models.URLField(verbose_name='url link direction')),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date time link was added')),
                ('under_leason', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='eduklinikapp.lesson')),
            ],
        ),
        migrations.CreateModel(
            name='profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_disabled', models.BooleanField(default=False, verbose_name='if this account is disabled')),
                ('country', models.CharField(max_length=1000, verbose_name='user country')),
                ('Verified', models.BooleanField(default=False, verbose_name='if the user is verified')),
                ('user_token', models.CharField(blank=True, max_length=200, null=True, unique=True, verbose_name='user token')),
                ('phone_number', models.CharField(max_length=50, verbose_name='user mobile number')),
                ('is_edit', models.BooleanField(default=False, verbose_name='if the user have edited ')),
                ('account_type', models.CharField(choices=[('General', 'General'), ('Admin', 'Admin'), ('staff', 'Staff'), ('Parent', 'Parent')], default='General', max_length=200, null=True, verbose_name='the account type')),
                ('not_count', models.BigIntegerField(default=0, verbose_name='user notification  count')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='the date time account was created')),
                ('ip_adress', models.GenericIPAddressField(blank=True, null=True, verbose_name='user ip adress')),
                ('reset_code', models.CharField(blank=True, max_length=100, null=True, verbose_name='user one time reset code')),
                ('c_code', models.CharField(blank=True, max_length=11, null=True, verbose_name='user country code')),
                ('refer_code', models.CharField(blank=True, max_length=100, null=True, unique=True, verbose_name='user referial code')),
                ('browser', models.CharField(blank=True, max_length=100, null=True, verbose_name='user access browser')),
                ('qr_code', models.ImageField(blank=True, null=True, upload_to='qrcodes', verbose_name='user qrcode')),
                ('cos_count', models.BigIntegerField(default=0, verbose_name='course count')),
                ('quz_count', models.BigIntegerField(default=0, verbose_name='quiz counr')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='user')),
                ('profile_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='eduklinikapp.userimage')),
            ],
        ),
        migrations.CreateModel(
            name='notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('msg', models.TextField(max_length=200, null=True, verbose_name='not message')),
                ('is_new', models.BooleanField(default=True, verbose_name='if not is new')),
                ('add_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date added')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='eduklinikapp.profile')),
            ],
            options={
                'ordering': ['-add_date'],
            },
        ),
        migrations.CreateModel(
            name='course_payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.BigIntegerField(default=0, verbose_name='price to pay')),
                ('payment_form', models.CharField(max_length=200, null=True, verbose_name='payment method')),
                ('is_paid', models.BooleanField(default=False, verbose_name='if the course is paid')),
                ('cours', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='eduklinikapp.course')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='eduklinikapp.profile', verbose_name='user payment get')),
            ],
        ),
        migrations.CreateModel(
            name='staff',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='staff name')),
                ('staff_token', models.CharField(blank=True, max_length=200, null=True, unique=True, verbose_name='staff token')),
                ('is_assined', models.BooleanField(default=False, verbose_name='if user is assignrd to a studen')),
                ('staff_type', models.CharField(choices=[('Admin', 'Admin'), ('Teacher', 'Teacher'), ('Totor', 'Tutor'), ('Contributor', 'Contributor'), ('Developer', 'Developer')], default='Teachers', max_length=200, verbose_name='the staff type')),
                ('staff_whatsapp', models.URLField(blank=True, verbose_name='staff whatsapp link')),
                ('staff_facebook', models.URLField(blank=True, verbose_name='staff facebook link')),
                ('staff_telegram', models.URLField(blank=True, verbose_name='staff telegram link')),
                ('staff_holder', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='eduklinikapp.profile')),
            ],
        ),
        migrations.AddField(
            model_name='course',
            name='up_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='eduklinikapp.staff'),
        ),
        migrations.CreateModel(
            name='c_notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('msg', models.TextField(max_length=200, null=True, verbose_name='not message')),
                ('is_new', models.BooleanField(default=True, verbose_name='if not is new')),
                ('add_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date added')),
                ('the_staff', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='eduklinikapp.staff')),
            ],
            options={
                'ordering': ['-add_date'],
            },
        ),
        migrations.CreateModel(
            name='article',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='article title')),
                ('meta', models.CharField(max_length=200, verbose_name='metadata')),
                ('search_str', models.CharField(blank=True, max_length=200, null=True, unique=True, verbose_name='search str to search blog')),
                ('post_str', models.CharField(blank=True, max_length=200, null=True, unique=True, verbose_name='post spec id')),
                ('context', models.TextField(verbose_name='article context and text')),
                ('image', models.ImageField(null=True, upload_to='post_images', verbose_name='artile image/post')),
                ('is_edited', models.BooleanField(default=False, verbose_name='if post has been edited')),
                ('pub_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date time of post')),
                ('likes_count', models.BigIntegerField(default=0, verbose_name='likes count')),
                ('views', models.BigIntegerField(default=0, verbose_name='blog views')),
                ('commet_count', models.BigIntegerField(default=0, verbose_name='blog views')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='eduklinikapp.staff')),
            ],
            options={
                'ordering': ['-pub_date'],
            },
        ),
        migrations.AddField(
            model_name='course',
            name='course_subject',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='course', to='eduklinikapp.subject'),
        ),
        migrations.CreateModel(
            name='tech_msg',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('img', models.ImageField(blank=True, null=True, upload_to='', verbose_name='image post')),
                ('msg', models.TextField(verbose_name='message')),
                ('spec_str', models.CharField(blank=True, max_length=200, null=True, verbose_name='linked to ')),
                ('is_linked', models.BooleanField(default=False, verbose_name='if student is linked already')),
                ('video', models.FileField(blank=True, null=True, upload_to='', verbose_name='video post')),
                ('date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date and time of post')),
                ('docs_file', models.FileField(blank=True, null=True, upload_to='', verbose_name='document file')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='eduklinikapp.profile')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='eduklinikapp.staff')),
            ],
        ),
        migrations.CreateModel(
            name='transaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('decript', models.CharField(max_length=200, verbose_name='payment decription')),
                ('date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date time of transaction')),
                ('status', models.BooleanField(default=False, verbose_name='payment status')),
                ('tran_holder', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='eduklinikapp.profile')),
            ],
        ),
        migrations.CreateModel(
            name='user_course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date and time course was added')),
                ('course_holder', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='eduklinikapp.profile', verbose_name='user holding the course')),
                ('main_course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='eduklinikapp.course')),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
    ]
